man_1_simple_shell     Holberton Programmer's Manual    man_1_simple_shell

NAME

         simple_shell - (Own version)

SYNOPSIS



DESCRIPTION

The ./hsh (hsh) executes a replica of the sh command in linux, which opens a
command interpreter, our version works with the user's environment, so you can 
"write" the full path of the command "/ bin / ls "or the command only "ls"and 
also allows to receive the arguments of the functions" ls -la ". The hsh 
evaluates if the command is "delivered" from the terminal (interactive way) or 
if it is given in another way (non-interactive way). Each command that the user 
writes enters as a single string that is stored in a buffer, this is divided 
into words and its existence is evaluated either as a built-in or if it is in 
the user's PATH. If the command does not exist or its arguments are not valid, 
print an error message in the standard error and start the click again from the 
promt. If the command is valid, it implements the fork function to create a child 
process that is responsible for executing the commands that the user entered, 
and the parent process will be responsible for freeing the memory and re-executing
the process from the promt. To close our shell the user must use the CTRL + D (EOF) 
signal or write the exit command.


RETURN VALUE

Ninguno


INTERNAL FUNCTIONS

FILE SHELL.C

- Funtion only_spaces
    In this function it determines if the user entered only spaces, if so, it 
    returns 1.

    Its prototype is the following:
    int solo_spaces(char *buffer);

- funtion split_input
    This function enters the buffer that captured the string that the user entered,
    divides the words every time it finds a space, creates a malloc to save each
    one and returns an array of strings.

    Its prototype is the following:
    char **split_input(char *buffer);

- funtion quit_spaces
    In this function enter the words found in the split_input function and remove
    unnecessary spaces.

    Its prototype is the following:
    void quit_spaces(char **commands);

FILE FORK.C

-fucntion comp
    In this function comp it evaluates if the command file is in the current folder
    or is a file in a valid path, if it does not call the existence function. If
    the comp function finds the file and has execution permission, it returns 1,
    if it does not exist it changes the output variable to 127 and returns 0, if
    it exists but is not executable change the variable salida to 126 and returns 0

    Its prototype is the following:
    int comp(int line, int *salir, char **commands, char *argv[])

- funcion existencia 
    The existencia function receives the command and executes the _getenv () function

    to obtain the directories of the environment's PATH and find if the file exists
    for said command, if it finds the path in our environment, it modifies the command
    pointer adding the full path and returns 1, if it doesn't return 0.

    Its prototype is the following:
    int existencia(char **command_0)


- funtion call_fork
    If comp finds the command to execute this function, it receives the address 
    of the program's output variable and a matrix char ** with the arguments ready
    to execute the fork () function; This function creates a child process where 
    it will execute the command and the parent process waits for the child process 
    to finish its execution and frees the memory occupied by the command and its 
    arguments, references the output variable with the WEXITSTATUS of the child 
    process and returns 0 always.
  
    Its prototype is the following:
    int call_fork(char **commands, int *salir);

FILE ENTORNO.C

  - Funcion _getenv
    in this function it will extract the directories of our PATH in an array. 
    first it compares letter by letter PATH with each of the folders in the 
    environment, when it finds it, it moves a space that will be the same and it 
    will copy all the folders in the path variable

    Its prototype is the following:
    char *_getenv(const char *name, char *env[])

FILE BUILT_INS.C

  - Funcion b_ins
    In this function we enter the command entered by the user and buy if it is 
    the word "exit" or "env", if it finds a match, it performs the necessary memory 
    release and enters the respective function and returns 1, if it does not find 
    a match, it returns 0.

    Its prototype is the following:
    int b_ins(char **commands, char *buffer, int salida); 

  - funcion n_exit
    In this function, it frees the memory housed in the buffer and ends the program 
    with the corresponding output.

    Its prototype is the following:
    void n_exit(char *buffer, int salida);

  -funcion env
    In this function all our local environment will be printed.

    Its prototype is the following:
    void env(void)

FILE PRINTF_CHAR.C

  -Function print_char().
    To print characters the _printf () function must first receive the% c specifier 
    that calls the print_char function, this function saves the character in a char 
    type variable. After saving it, copies this character in the buffer and return 1.

    Its prototype is the following:
    int print_char(va_list a, char buffer, int index);

  -Functions print_string:
    To print integers the function _printf must make a conversion from the string 
    to characters, it does so by calling the internal function print_string, which 
    runs through the string given as a variatic argument and assigns each character 
    of it in a position of the buffer, then returns the number of positioned characters.

    Its prototype is the following:
    int print_string(va_list a, char buffer, int index);

FILE PRINTF_INT.C

  -Function print_int:
    To print integers the function _printf () must make a conversion of each digit 
    of the integer to a character, it does so by calling the internal function 
    print_int, this calculates the number of digits of the integer to allocate a 
    memory space with the same amount in bytes to a "variable" pointer to char, 
    and to each position it assigns an integer digit in the corresponding position. 
    Once this part is done, it copies the character digits in the buffer, frees the 
    allocated memory and returns the number of digits written.

    Its prototype is the following:
    int print_int(va_list a, char buffer, int index);

  - Function print_u_int:
    To print unsigned integers the function _printf () must make a conversion of 
    each digit of the integer to a character, it does so by calling the internal 
    function print_u_int, this calculates the number of digits of the integer to 
    allocate a memory space with the same amount in bytes to a "variable" pointer 
    to char, and to each position it assigns an integer digit in the corresponding 
    position. Once this part is done, it writes to the standard of this "variable", 
    frees the allocated memory and returns the number of digits written.

    Its prototype is the following:
    int print_u_int(va_list a, char buffer, int index);


  AUTHORS:
      Jordan Bonnett, Leonardo Ruiz, Nicolas Ccastillo.

  DATE:
    15/02/2021
